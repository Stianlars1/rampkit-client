import type { AnimationPreset } from "./types";

const inRange = (v: number, min: number, max: number) =>
  Math.max(min, Math.min(max, v));

type IndexTotal = { index: number; total: number };
const prog = ({ index, total }: IndexTotal) => index / Math.max(1, total - 1);

/**
 * 12 curated presets.
 * All tie height + motion together so compositions stay coherent.
 */
export const PRESETS: AnimationPreset[] = [
  // ===  The Original Ones [first 4]  ===

  // Depth Cascade (first raw block)
  {
    id: "depth-cascade",
    label: "Depth Cascade",
    height: 100, // matches the final height in `to`
    from: {
      opacity: 0,
      force3D: true,
      scale: 2,
      z: 0,
      x: 100,
      y: -150,
      filter: "blur(0px)",
    },
    to: {
      filter: "blur(0px)",
      opacity: 1,
      scale: () => 1,
      x: () => 0,
      y: () => 0,
      z: () => 0,
      rotateX: () => "1deg",
      rotateY: () => "1deg",
      rotateZ: () => "1deg",
      duration: 1.5,
      ease: "power3.inOut",
      delay: (ctx: IndexTotal) => 0.1 * ctx.index,
      height: () => 100,
    },
  },

  /*  // Far Depth Zoom (second raw block)
  {
    id: "far-depth-zoom",
    label: "Far Depth Zoom",
    height: 500, // starting height not animated here
    from: {
      opacity: 0,
      force3D: true,
      scale: 3,
      z: 500,
      x: 100,
      y: -150,
      filter: "blur(4px)",
    },
    to: {
      filter: "blur(0px)",
      opacity: 1,
      scale: (ctx: IndexTotal) => 4 - 0.1 * ctx.index,
      x: () => 0,
      y: () => 0,
      rotateX: (ctx: IndexTotal) => `${ctx.index * 2}deg`,
      rotateY: (ctx: IndexTotal) => `${ctx.index * 1.5}deg`,
      rotateZ: (ctx: IndexTotal) => `${ctx.index * 4}deg`,
      z: (ctx: IndexTotal) => 10 * ctx.index,
      duration: 1.5,
      ease: "power3.inOut",
      delay: (ctx: IndexTotal) => 0.1 * ctx.index,
    },
  },

  // Near Depth Fan (third raw block)
  {
    id: "near-depth-fan",
    label: "Near Depth Fan",
    height: 500,
    from: {
      opacity: 1,
      force3D: true,
      scale: 1,
      z: 500,
      x: -10,
      y: -50,
      filter: "blur(2px)",
    },
    to: {
      filter: "blur(0px)",
      scale: (ctx: IndexTotal) => 4 - 0.1 * ctx.index,
      x: (ctx: IndexTotal) => 5 * ctx.index,
      y: (ctx: IndexTotal) => -10 * ctx.index,
      rotateX: (ctx: IndexTotal) => `${ctx.index * 2}deg`,
      rotateY: (ctx: IndexTotal) => `${ctx.index * 1.5}deg`,
      rotateZ: (ctx: IndexTotal) => `${ctx.index * 4}deg`,
      z: (ctx: IndexTotal) => 10 * ctx.index,
      duration: 1.5,
      ease: "power3.inOut",
      delay: (ctx: IndexTotal) => 0.1 * ctx.index,
    },
  },

  // Reverse Depth Sweep (fourth raw block)
  {
    id: "reverse-depth-sweep",
    label: "Reverse Depth Sweep",
    height: 500,
    from: {
      opacity: 1,
      force3D: true,
      scale: 1,
      z: -100,
      x: 10,
      y: 50,
      filter: "blur(6px)",
    },
    to: {
      filter: "blur(0px)",
      scale: (ctx: IndexTotal) => 4 - 0.1 * ctx.index,
      x: (ctx: IndexTotal) => 5 * ctx.index,
      y: (ctx: IndexTotal) => -10 * ctx.index,
      rotateX: (ctx: IndexTotal) => `${ctx.index * 2}deg`,
      rotateY: (ctx: IndexTotal) => `${ctx.index * 1.5}deg`,
      rotateZ: (ctx: IndexTotal) => `${ctx.index * 4}deg`,
      z: (ctx: IndexTotal) => 10 * ctx.index,
      duration: 1.5,
      ease: "power3.inOut",
      delay: (ctx: IndexTotal) => 0.1 * ctx.index,
    },
  },*/

  // === New ones - needs tweakings before usage! ===
  /*
  // New presets
  {
    id: "fan-right",
    label: "Gentle Fan Right",
    height: ({ index, total }: IndexTotal) =>
      `${inRange(8 + index * 3, 8, 60)}vh`,
    from: {
      opacity: 0,
      scale: 0.85,
      x: 0,
      y: 120,
      z: -150,
      rotateX: -35,
      rotateY: 0,
      rotateZ: -8,
      filter: "blur(20px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) => prog({ index, total }),
      scale: ({ index }: IndexTotal) => 1.15 - index * 0.01,
      x: ({ index }: IndexTotal) => 6 * index,
      y: ({ index }: IndexTotal) => -10 * index,
      z: ({ index }: IndexTotal) => 10 * index,
      rotateX: ({ index }: IndexTotal) => -20 + index * 1.2,
      rotateY: ({ index }: IndexTotal) => 8 + index * 0.8,
      rotateZ: ({ index }: IndexTotal) => -4 + index * 1.5,
      filter: "blur(0px)",
      duration: 1.4,
      ease: "power3.inOut",
      delay: ({ index }: IndexTotal) => 0.05 * index,
    },
  },
  {
    id: "stack-rise",
    label: "Stack Rise",
    height: ({ index, total }: IndexTotal) => `${20 + index * 2}vh`,
    from: {
      opacity: 0,
      scale: 0.9,
      x: -40,
      y: 200,
      z: -300,
      rotateX: -30,
      rotateY: -10,
      rotateZ: 0,
      filter: "blur(24px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) =>
        inRange(0.2 + prog({ index, total }), 0.2, 1),
      scale: ({ index }: IndexTotal) => 1.05 - index * 0.008,
      x: ({ index }: IndexTotal) => -10 + index * 4,
      y: ({ index }: IndexTotal) => -20 * index,
      z: ({ index }: IndexTotal) => 20 * index,
      rotateX: ({ index }: IndexTotal) => -10 + index * 0.8,
      rotateY: ({ index }: IndexTotal) => -5 + index * 0.4,
      rotateZ: ({ index }: IndexTotal) => index * 1.2,
      filter: "blur(0px)",
      duration: 1.2,
      ease: "power3.out",
      delay: ({ index }: IndexTotal) => 0.04 * index,
    },
  },
  {
    id: "accordion",
    label: "Accordion",
    height: ({ index, total }: IndexTotal) =>
      `${inRange(12 + index * 1.2, 12, 42)}vh`,
    from: {
      opacity: 0,
      scaleX: 0.7,
      scaleY: 1.2,
      x: -120,
      y: 0,
      z: -200,
      rotateX: -45,
      rotateY: 25,
      rotateZ: -12,
      filter: "blur(22px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) => prog({ index, total }),
      scaleX: 1,
      scaleY: 1,
      x: ({ index }: IndexTotal) => -20 + index * 16,
      y: ({ index }: IndexTotal) => -6 * index,
      z: ({ index }: IndexTotal) => 18 * index,
      rotateX: ({ index }: IndexTotal) => -20 + index,
      rotateY: ({ index }: IndexTotal) => 10 + index * 0.6,
      rotateZ: ({ index }: IndexTotal) => -6 + index,
      filter: "blur(0px)",
      duration: 1.35,
      ease: "power4.out",
      delay: ({ index }: IndexTotal) => 0.03 * index,
    },
  },
  {
    id: "cascade-left",
    label: "Cascade Left",
    height: ({ index }: IndexTotal) => `${32 - index * 1.1}vh`,
    from: {
      opacity: 0,
      scale: 0.8,
      x: 200,
      y: 120,
      z: -250,
      rotateX: -30,
      rotateY: -25,
      rotateZ: 8,
      filter: "blur(18px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) =>
        inRange(0.15 + prog({ index, total }), 0.15, 1),
      scale: ({ index }: IndexTotal) => 1 + index * 0.005,
      x: ({ index }: IndexTotal) => 60 - index * 22,
      y: ({ index }: IndexTotal) => -12 * index,
      z: ({ index }: IndexTotal) => 22 * index,
      rotateX: ({ index }: IndexTotal) => -12 + index * 0.6,
      rotateY: ({ index }: IndexTotal) => -10 + index,
      rotateZ: ({ index }: IndexTotal) => 4 - index * 0.8,
      filter: "blur(0px)",
      duration: 1.2,
      ease: "power2.out",
      delay: ({ index }: IndexTotal) => 0.06 * index,
    },
  },
  {
    id: "hinge-swing",
    label: "Hinge Swing",
    height: ({ index }: IndexTotal) => `${18 + index * 2.5}vh`,
    from: {
      opacity: 0,
      transformOrigin: "0% 50%",
      rotateZ: -35,
      x: -140,
      y: -40,
      z: -120,
      scale: 0.9,
      filter: "blur(20px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) => prog({ index, total }),
      rotateZ: ({ index }: IndexTotal) => -10 + index * 2.2,
      x: ({ index }: IndexTotal) => -60 + index * 14,
      y: ({ index }: IndexTotal) => 10 + index * 4,
      z: ({ index }: IndexTotal) => 12 * index,
      scale: 1,
      filter: "blur(0px)",
      duration: 1.1,
      ease: "back.out(1.6)",
      delay: ({ index }: IndexTotal) => 0.05 * index,
    },
  },
  {
    id: "tilt-stack",
    label: "Tilt Stack",
    height: ({ index }: IndexTotal) => `${26 + Math.sin(index / 2) * 6}vh`,
    from: {
      opacity: 0,
      rotateX: -50,
      rotateY: 15,
      rotateZ: -18,
      x: -60,
      y: 160,
      z: -220,
      scale: 0.85,
      filter: "blur(18px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) => prog({ index, total }),
      rotateX: ({ index }: IndexTotal) => -10 + index * 1.3,
      rotateY: ({ index }: IndexTotal) => 10 + index * 0.5,
      rotateZ: ({ index }: IndexTotal) => -6 + index * 1.4,
      x: ({ index }: IndexTotal) => -10 + index * 10,
      y: ({ index }: IndexTotal) => -16 * index,
      z: ({ index }: IndexTotal) => 20 * index,
      scale: 1,
      filter: "blur(0px)",
      duration: 1.3,
      ease: "power3.inOut",
      delay: ({ index }: IndexTotal) => 0.045 * index,
    },
  },
  {
    id: "rail-slide",
    label: "Rail Slide",
    height: ({ index }: IndexTotal) => `${14 + index * 1.6}vh`,
    from: {
      opacity: 0,
      xPercent: -120,
      y: 40,
      z: -150,
      rotateZ: -8,
      scale: 0.9,
      filter: "blur(12px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) =>
        inRange(0.25 + prog({ index, total }), 0.25, 1),
      xPercent: ({ index }: IndexTotal) => -10 + index * 10,
      y: ({ index }: IndexTotal) => -8 * index,
      z: ({ index }: IndexTotal) => 12 * index,
      rotateZ: ({ index }: IndexTotal) => -2 + index * 0.6,
      scale: 1,
      filter: "blur(0px)",
      duration: 1.05,
      ease: "power1.out",
      delay: ({ index }: IndexTotal) => 0.03 * index,
    },
  },
  {
    id: "orbit-fan",
    label: "Orbit Fan",
    height: ({ index }: IndexTotal) => `${22 + index * 2}vh`,
    from: {
      opacity: 0,
      rotateY: -60,
      x: -180,
      y: 120,
      z: -300,
      scale: 0.8,
      filter: "blur(24px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) => prog({ index, total }),
      rotateY: ({ index }: IndexTotal) => -20 + index * 2.2,
      x: ({ index }: IndexTotal) => -40 + index * 16,
      y: ({ index }: IndexTotal) => -20 * index,
      z: ({ index }: IndexTotal) => 26 * index,
      scale: 1,
      filter: "blur(0px)",
      duration: 1.4,
      ease: "power4.out",
      delay: ({ index }: IndexTotal) => 0.05 * index,
    },
  },
  {
    id: "ribbon",
    label: "Ribbon Sweep",
    height: ({ index }: IndexTotal) =>
      `${18 + Math.max(0, 10 - index) * 1.5}vh`,
    from: {
      opacity: 0,
      x: 140,
      y: 160,
      z: -260,
      rotateX: -25,
      rotateY: -40,
      rotateZ: 14,
      scale: 0.9,
      filter: "blur(18px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) =>
        inRange(0.2 + prog({ index, total }), 0.2, 1),
      x: ({ index }: IndexTotal) => 40 - index * 16,
      y: ({ index }: IndexTotal) => -10 * index,
      z: ({ index }: IndexTotal) => 20 * index,
      rotateX: ({ index }: IndexTotal) => -8 + index,
      rotateY: ({ index }: IndexTotal) => -10 + index * 2.2,
      rotateZ: ({ index }: IndexTotal) => 6 - index * 1.4,
      scale: 1,
      filter: "blur(0px)",
      duration: 1.25,
      ease: "power2.out",
      delay: ({ index }: IndexTotal) => 0.045 * index,
    },
  },
  {
    id: "deck-drop",
    label: "Deck Drop",
    height: ({ index }: IndexTotal) => `${30 - index}vh`,
    from: {
      opacity: 0,
      y: -220,
      z: -180,
      rotateX: -70,
      rotateZ: -12,
      scale: 0.95,
      filter: "blur(22px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) => prog({ index, total }),
      y: ({ index }: IndexTotal) => -40 + index * 18,
      z: ({ index }: IndexTotal) => 16 * index,
      rotateX: ({ index }: IndexTotal) => -18 + index * 1.4,
      rotateZ: ({ index }: IndexTotal) => -4 + index,
      scale: 1,
      filter: "blur(0px)",
      duration: 1.2,
      ease: "power3.out",
      delay: ({ index }: IndexTotal) => 0.04 * index,
    },
  },
  {
    id: "slide-inset",
    label: "Slide Inset",
    height: ({ index }: IndexTotal) => `${16 + index * 1.2}vh`,
    from: {
      opacity: 0,
      x: -220,
      y: 60,
      z: -120,
      rotateY: -35,
      scale: 0.92,
      filter: "blur(14px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) =>
        inRange(0.3 + prog({ index, total }), 0.3, 1),
      x: ({ index }: IndexTotal) => -40 + index * 18,
      y: ({ index }: IndexTotal) => -10 * index,
      z: ({ index }: IndexTotal) => 14 * index,
      rotateY: ({ index }: IndexTotal) => -10 + index,
      scale: 1,
      filter: "blur(0px)",
      duration: 1.05,
      ease: "power2.out",
      delay: ({ index }: IndexTotal) => 0.03 * index,
    },
  },
  {
    id: "flare",
    label: "Lens Flare",
    height: ({ index }: IndexTotal) => `${22 + index * 2.2}vh`,
    from: {
      opacity: 0,
      x: 0,
      y: 0,
      z: -320,
      rotateX: -40,
      rotateY: 0,
      rotateZ: 0,
      scale: 0.8,
      filter: "blur(28px) brightness(0.8)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) => prog({ index, total }),
      x: ({ index }: IndexTotal) => -6 * index,
      y: ({ index }: IndexTotal) => -14 * index,
      z: ({ index }: IndexTotal) => 28 * index,
      rotateX: ({ index }: IndexTotal) => -14 + index * 1.4,
      rotateZ: ({ index }: IndexTotal) => index * 1.2,
      scale: 1,
      filter: "blur(0px) brightness(1)",
      duration: 1.6,
      ease: "power3.inOut",
      delay: ({ index }: IndexTotal) => 0.06 * index,
    },
  },
  {
    id: "card-fan-tight",
    label: "Card Fan Tight",
    height: ({ index }: IndexTotal) => `${18 + index * 1.8}vh`,
    from: {
      opacity: 0,
      scale: 0.88,
      x: -40,
      y: 130,
      z: -180,
      rotateX: -35,
      rotateY: 15,
      rotateZ: -18,
      filter: "blur(16px)",
      force3D: true,
    },
    to: {
      opacity: ({ index, total }: IndexTotal) => prog({ index, total }),
      x: ({ index }: IndexTotal) => -10 + index * 10,
      y: ({ index }: IndexTotal) => -12 * index,
      z: ({ index }: IndexTotal) => 15 * index,
      rotateX: ({ index }: IndexTotal) => -14 + index * 1.1,
      rotateY: ({ index }: IndexTotal) => 6 + index * 0.6,
      rotateZ: ({ index }: IndexTotal) => -6 + index * 1.2,
      scale: 1,
      filter: "blur(0px)",
      duration: 1.15,
      ease: "power2.out",
      delay: ({ index }: IndexTotal) => 0.04 * index,
    },
  },*/
];
